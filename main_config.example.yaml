---
# infrastructure info:
environment: 'dev' # this will cause cluster (and application) to be reachable at master_host IP (192.168.1.200). Set to "production" to make the cluster (and application) reachable to cluster_public_ip (in this case)
cluster_dns_name: 'cluster.com' # public dns name where app will be reachable
cluster_public_ip: '2.42.42.133' # this is the cluster public IP (so this is the real public IP)
master_host: 'm1@192.168.1.200' # kubernetes master host IP from which everything is executed: provide it from internal interface (192.168...)
hosts: # list of ONLY worker and other control plane nodes: made from USERNAME@IP_ADDRESS
- 'm1@192.168.1.201' # hosts starting with 'm' will be considered as control plane nodes
- 'w2@192.168.1.202' # hosts starting with 'w' will be considered as worker nodes
github_branch_name: 'develop' # the branch to pull the code from
oscdimg_path: 'C:\Program Files (x86)\Windows Kits\10\Assessment and Deployment Kit\Deployment Tools\amd64\Oscdimg\oscdimg.exe' # You must provide the oscdimg.exe path. https://learn.microsoft.com/it-it/windows-hardware/get-started/adk-install . Oscdimg is used to write the CIDATA image (containing meta-data and user-data files) for cloud init as a ISO 9660 image
qemuimg_path: 'E:\Download\qemu-img\qemu-img.exe' # http://www.cloudbase.it/qemu-img-windows/. Quemu is used to convert ubuntu cloud-image to a virtual hard drive to be used by virtual machines
vm_store_path: 'F:\VM' # the path where all the virtual machines will be stored
os_image_path: 'E:\Desktop\torrent downloads\SO\focal-server-cloudimg-amd64.img' # the operating system path to be installed on all virtual machines. You must pick up a cloud-image, cloud-init configuration won't work otherwise
docker_username: 'docker_username' # used to build and push docker images to repository
docker_password: 'docker_password' # used to build and push docker images to repository
docker_server_repository_name: 'binanceb_nodejs_server' # used to push docker server image from repository and pull by kubernetes
docker_client_repository_name: 'binanceb_vuejs_client' # used to push docker client image from repository and pull by kubernetes
# application config parameters:
server_access_token_secret: 'server_access_token_secret'
server_refresh_token_secret: 'server_refresh_token_secret'
server_access_token_lifetime: '50'
server_refresh_token_lifetime: '50'
mongodb_replica_count: '1' # set to 1. More than one replica not working for now 'cause multiple fisical hosts would be needed in order to use a different load balancer ip address for each replica
mongo_root_username: 'mongorootusername'
mongo_root_password: 'mongorootpassword'